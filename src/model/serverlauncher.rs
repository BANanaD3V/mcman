use std::collections::HashMap;

use serde::{Deserialize, Serialize};

#[derive(Debug, Deserialize, Serialize)]
#[serde(default)]
pub struct ServerLauncher {
    pub aikars_flags: bool,
    pub proxy_flags: bool,
    pub nogui: bool,
    #[serde(skip_serializing_if = "crate::util::is_default")]
    pub disable: bool,
    #[serde(skip_serializing_if = "crate::util::is_default")]
    pub jvm_args: String,
    #[serde(skip_serializing_if = "crate::util::is_default")]
    pub game_args: String,
    #[serde(skip_serializing_if = "crate::util::is_default")]
    pub eula_args: bool,
    #[serde(skip_serializing_if = "crate::util::is_default")]
    pub memory: String,
    #[serde(skip_serializing_if = "crate::util::is_default")]
    pub properties: HashMap<String, String>,
}

impl ServerLauncher {
    pub fn generate_script_linux(&self, jarname: &str, servername: &str) -> String {
        format!(
            "#!/bin/sh\n# generated by mcman\n{}\n",
            self.generate_script_java(jarname, servername)
        )
    }

    pub fn generate_script_win(&self, jarname: &str, servername: &str) -> String {
        format!(
            "@echo off\r\n:: generated by mcman\r\ntitle {servername}\r\n{}\r\n",
            self.generate_script_java(jarname, servername)
        )
    }

    pub fn generate_script_java(&self, jarname: &str, _servername: &str) -> String {
        let mut script = String::new();

        // TODO: custom java stuff from ~/.mcmanconfig or something idk
        script.push_str("java ");

        if !self.jvm_args.is_empty() {
            script += &self.jvm_args.to_string();
            script += " ";
        }

        if !self.memory.is_empty() {
            script += "-Xms";
            script += &self.memory.to_string();
            script += " -Xmx";
            script += &self.memory.to_string();
            script += " ";
        }

        if self.aikars_flags {
            script += include_str!("../../res/aikars_flags");
            script += " ";
        }

        if self.proxy_flags {
            script += include_str!("../../res/proxy_flags");
            script += " ";
        }

        if self.eula_args {
            script += "-Dcom.mojang.eula.agree=true ";
        }

        for (key, value) in &self.properties {
            script += &format!(
                "-D{}={} ",
                key,
                if value.contains(char::is_whitespace) {
                    "\"".to_owned() + value + "\""
                } else {
                    value.clone()
                }
            );
        }

        script += "-jar ";
        script += jarname;
        script += " ";

        if self.nogui {
            script.push_str("--nogui ");
        }

        script += &self.game_args;

        script.trim().to_owned()
    }
}

impl Default for ServerLauncher {
    fn default() -> Self {
        Self {
            disable: false,
            jvm_args: String::new(),
            game_args: String::new(),
            aikars_flags: true,
            proxy_flags: false,
            nogui: true,
            eula_args: true,
            memory: String::new(),
            properties: HashMap::default(),
        }
    }
}
